definitions:
  models.CreateOTPRequest:
    properties:
      user_id:
        type: string
    type: object
  models.CreateUser:
    properties:
      full_name:
        type: string
      login:
        type: string
      password:
        type: string
      phone:
        type: string
    type: object
  models.OTP:
    properties:
      code:
        type: string
      expires_at:
        type: string
      id:
        type: string
      used_at:
        type: string
      user_id:
        type: string
    type: object
  models.Response:
    properties:
      data: {}
      description:
        type: string
      statusCode:
        type: integer
    type: object
  models.UpdateUser:
    properties:
      full_name:
        type: string
      phone:
        type: string
    type: object
  models.UpdateUserPassword:
    properties:
      new_password:
        type: string
      old_password:
        type: string
    type: object
  models.User:
    properties:
      branch_id:
        type: string
      cash:
        type: integer
      created_at:
        type: string
      full_name:
        type: string
      id:
        type: string
      login:
        type: string
      password:
        type: string
      phone:
        type: string
      updated_at:
        type: string
      user_type:
        type: string
    type: object
  models.UserLoginRequest:
    properties:
      login:
        type: string
      password:
        type: string
    type: object
  models.UserLoginResponse:
    properties:
      access_token:
        type: string
      refresh_token:
        type: string
    type: object
  models.UsersResponse:
    properties:
      count:
        type: integer
      users:
        items:
          $ref: '#/definitions/models.User'
        type: array
    type: object
  models.VerifyOTPRequest:
    properties:
      code:
        type: string
      user_id:
        type: string
    type: object
info:
  contact: {}
  description: This is a sample server celler server.
  title: Swagger Example API
  version: "1.0"
paths:
  /auth/otp:
    post:
      consumes:
      - application/json
      description: Create OTP for user
      parameters:
      - description: User ID
        in: body
        name: user_id
        required: true
        schema:
          $ref: '#/definitions/models.CreateOTPRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.OTP'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Response'
      summary: Create OTP
      tags:
      - auth
  /auth/otp/verify:
    post:
      consumes:
      - application/json
      description: Verify OTP for user
      parameters:
      - description: User ID and OTP Code
        in: body
        name: user_id
        required: true
        schema:
          $ref: '#/definitions/models.VerifyOTPRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: boolean
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Response'
      summary: Verify OTP
      tags:
      - auth
  /auth/user/login:
    post:
      consumes:
      - application/json
      description: user login
      parameters:
      - description: login
        in: body
        name: login
        required: true
        schema:
          $ref: '#/definitions/models.UserLoginRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.UserLoginResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Response'
      summary: User login
      tags:
      - auth
  /user:
    post:
      consumes:
      - application/json
      description: create a new user
      parameters:
      - description: user
        in: body
        name: user
        schema:
          $ref: '#/definitions/models.CreateUser'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Response'
      summary: Creates a new user
      tags:
      - user
  /user/{id}:
    delete:
      consumes:
      - application/json
      description: delete user
      parameters:
      - description: user_id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Response'
      summary: Delete user
      tags:
      - user
    get:
      consumes:
      - application/json
      description: get user by ID
      parameters:
      - description: user
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Response'
      summary: Gets user
      tags:
      - user
    patch:
      consumes:
      - application/json
      description: update user password
      parameters:
      - description: user_id
        in: path
        name: id
        required: true
        type: string
      - description: user
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.UpdateUserPassword'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Response'
      summary: Update user password
      tags:
      - user
    put:
      consumes:
      - application/json
      description: update user
      parameters:
      - description: user_id
        in: path
        name: id
        required: true
        type: string
      - description: user
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.UpdateUser'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Response'
      summary: Update user
      tags:
      - user
  /users:
    get:
      consumes:
      - application/json
      description: get user list
      parameters:
      - description: page
        in: query
        name: page
        type: string
      - description: limit
        in: query
        name: limit
        type: string
      - description: search
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UsersResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Response'
      summary: Get user list
      tags:
      - user
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
